import { NextResponse } from 'next/server';

export async function GET() {
    const GOOGLE_SCRIPT_URL = process.env.GOOGLE_SCRIPT_URL;
    
    return NextResponse.json({
        configured: !!GOOGLE_SCRIPT_URL,
        url: GOOGLE_SCRIPT_URL ? 'Configur√©e' : 'Non configur√©e',
        isPlaceholder: GOOGLE_SCRIPT_URL?.includes('1uqOL3DprhkmCkTTKEZOBsdC8IRKoF6dv4Bs89XTSFMUmKCXBpg6xhsHM'),
        timestamp: new Date().toISOString()
    });
}

export async function POST(request) {
    try {
        const { name, email } = await request.json();

        // Validation des donn√©es
        if (!name || !email) {
            return NextResponse.json(
                { error: 'Le nom et l\'email sont requis' },
                { status: 400 }
            );
        }

        // Validation de l'email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(email)) {
            return NextResponse.json(
                { error: 'Format d\'email invalide' },
                { status: 400 }
            );
        }

        // URL de votre Google Apps Script Web App
        const GOOGLE_SCRIPT_URL = process.env.GOOGLE_SCRIPT_URL;

        // Si Google Apps Script n'est pas configur√©, on sauvegarde localement en attendant
        if (!GOOGLE_SCRIPT_URL || GOOGLE_SCRIPT_URL.includes('1uqOL3DprhkmCkTTKEZOBsdC8IRKoF6dv4Bs89XTSFMUmKCXBpg6xhsHM')) {
            console.log('üìß Inscription newsletter (mode d√©veloppement):', { 
                name, 
                email, 
                timestamp: new Date().toISOString() 
            });
            
            // En mode d√©veloppement, on simule un succ√®s
            return NextResponse.json({
                success: true,
                message: 'Inscription r√©ussie ! (Mode d√©veloppement - configurez GOOGLE_SCRIPT_URL pour la production)',
                data: { name, email },
                mode: 'development'
            });
        }

        console.log('üîÑ Tentative d\'envoi vers Google Apps Script...');
        console.log('URL:', GOOGLE_SCRIPT_URL);

        try {
            // Donn√©es √† envoyer
            const payload = {
                name,
                email,
                timestamp: new Date().toISOString(),
                source: 'Newsletter Voix du B√©nin'
            };

            console.log('üì¶ Donn√©es envoy√©es:', payload);

            // Envoyer les donn√©es √† Google Sheets via Google Apps Script
            const response = await fetch(GOOGLE_SCRIPT_URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload),
            });

            console.log('üìä Statut de r√©ponse Google Apps Script:', response.status);
            console.log('üìã Headers de r√©ponse:', Object.fromEntries(response.headers.entries()));

            const responseText = await response.text();
            console.log('üìÑ R√©ponse brute:', responseText);

            let result;
            try {
                result = JSON.parse(responseText);
                console.log('‚úÖ R√©ponse pars√©e:', result);
            } catch (parseError) {
                console.error('‚ùå Erreur lors du parsing de la r√©ponse:', parseError);
                console.log('üîç R√©ponse qui a caus√© l\'erreur:', responseText);
                
                // Si la r√©ponse n'est pas du JSON, c'est peut-√™tre une erreur HTML
                if (responseText.includes('<html') || responseText.includes('<!DOCTYPE')) {
                    throw new Error('Google Apps Script a retourn√© une page HTML au lieu de JSON. V√©rifiez que le script est d√©ploy√© correctement.');
                }
                
                throw new Error(`R√©ponse invalide de Google Apps Script: ${responseText.substring(0, 200)}...`);
            }

            if (!response.ok) {
                console.error('‚ùå Erreur HTTP:', response.status);
                throw new Error(`Google Apps Script a retourn√© une erreur (${response.status}): ${result.error || responseText}`);
            }

            if (result.success === false) {
                console.error('‚ùå Erreur dans la r√©ponse:', result.error);
                throw new Error(`Erreur dans Google Apps Script: ${result.error}`);
            }

            console.log('üéâ Succ√®s! Donn√©es envoy√©es vers Google Sheets');

            return NextResponse.json({
                success: true,
                message: 'Inscription r√©ussie !',
                data: result,
                mode: 'production'
            });

        } catch (fetchError) {
            console.error('üí• Erreur lors de la communication avec Google Apps Script:', fetchError);
            console.log('üîó URL utilis√©e:', GOOGLE_SCRIPT_URL);
            console.log('üìù Donn√©es tent√©es:', { name, email, timestamp: new Date().toISOString() });
            
            // En cas d'erreur avec Google Apps Script, on sauvegarde au moins localement
            console.log('üíæ Sauvegarde locale de l\'inscription:', { 
                name, 
                email, 
                timestamp: new Date().toISOString(),
                error: fetchError.message 
            });

            return NextResponse.json({
                success: true,
                message: 'Inscription enregistr√©e ! (Probl√®me temporaire avec la synchronisation)',
                data: { name, email },
                warning: 'Les donn√©es seront synchronis√©es ult√©rieurement',
                error: fetchError.message,
                mode: 'fallback'
            });
        }

    } catch (error) {
        console.error('üö® Erreur g√©n√©rale lors de l\'inscription √† la newsletter:', error);
        return NextResponse.json(
            { error: 'Erreur interne du serveur' },
            { status: 500 }
        );
    }
}